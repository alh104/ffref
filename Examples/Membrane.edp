


// ~/ffalh/ffref/Examples/Membrane.m4
// ==================================
// 
// Originally from [[https://doc.freefem.org/tutorials/membrane.html]]
// Adapted by Antoine Le Hyaric ([[http://www.ljll.fr/lehyaric]])
// 
// Sorbonne UniversitÃ©, CNRS, Laboratoire Jacques-Louis Lions, F-75005, Paris, France
// 
// [[elisp:(progn (org-link-minor-mode) (setq org-link-descriptive nil) (org-toggle-link-display))][hide links]] [[elisp:(progn (org-link-minor-mode) (setq org-link-descriptive t) (org-toggle-link-display))][show links]] [[elisp:(alh-1dex-open)][open 1dex]] [[elisp:(alh-1dex-update)][update 1dex]]
// [[elisp:(alh-set-keywords)][set keywords]] ([[file:~/alh/bin/headeralh][headeralh]])
// emacs-keywords adapted edp nofaces origin=[[https://doc.freefem.org/tutorials/membrane.html]] start=08/10/21 univ update=10/06/24

// Parameters
real theta = 4.*pi/3.;
real a = 2.; //The length of the semimajor axis
real b = 1.; //The length of the semiminor axis
func z = x;

// Mesh
border Gamma1(t=0., theta){x=a*cos(t); y=b*sin(t);}
border Gamma2(t=theta, 2.*pi){x=a*cos(t); y=b*sin(t);}
mesh Th = buildmesh(Gamma1(100) + Gamma2(50));

// Fespace
fespace Vh(Th, P2); //P2 conforming triangular FEM
Vh phi, w, f=1;

// Solve
solve Laplace(phi, w)
	= int2d(Th)(
		  dx(phi)*dx(w)
		+ dy(phi)*dy(w)
	)
	- int2d(Th)(
		  f*w
	)
	+ on(Gamma1, phi=z)
	;

// Plot
plot(phi, wait=true, ps="test_Membrane.eps"); //Plot phi
plot(Th, wait=true, ps="test_MembraneTh.eps"); //Plot Th

// Save mesh
savemesh(Th,"test_Th.msh");

// [[elisp:(compile "cd .. && ./history -default -run -db Examples/Membrane")]] => [[file:Membrane.default.out]]
// [[elisp:(compile "cd .. && ./history -ffjs -run -db Examples/Membrane")]] => [[file:Membrane.ffjs_dev.out]]
// [[file:../history.db::Examples/Membrane]]
// [[elisp:(compile "FreeFem++ Membrane.edp")]]

real ref=int2d(Th)(abs(phi));
real ffreferror=abs(ref-6.28973)/6.28973;
cout<<"FFREF_"<<"ERROR="<<ffreferror<<endl;
cout<<"FFREF_"<<"ERRMAX="<<1e-3<<endl;
cout<<"FFREF_REF"<<"VAL="<<ref<<endl;
cout<<"FFREF_CHECK_";
if(ffreferror<1e-3)cout<<"OK"<<endl;
else cout<<"KO"<<endl;
;
// Version v2;
// Test level +;

// Local Variables:
// mode:ff++
// c-basic-offset:2
// eval:(visual-line-mode t)
// coding:utf-8
// eval:(flyspell-prog-mode)
// eval:(outline-minor-mode)
// eval:(org-link-minor-mode)
// End:
// LocalWords: emacs
