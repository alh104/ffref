


// ~/ffalh/ffref/Models/DomainDecomp2.m4
// =====================================
// 
// Originally from [[https://doc.freefem.org/models/domain-decomposition.html]]
// Adapted by Antoine Le Hyaric ([[http://www.ljll.fr/lehyaric]])
// 
// Sorbonne Universit√©, CNRS, Laboratoire Jacques-Louis Lions, F-75005, Paris, France
// 
// [[elisp:(progn (org-link-minor-mode) (setq org-link-descriptive nil) (org-toggle-link-display))][hide links]] [[elisp:(progn (org-link-minor-mode) (setq org-link-descriptive t) (org-toggle-link-display))][show links]] [[elisp:(alh-1dex-open)][open 1dex]] [[elisp:(alh-1dex-update)][update 1dex]]
// [[elisp:(alh-set-keywords)][set keywords]] ([[file:~/alh/bin/headeralh][headeralh]])
// emacs-keywords adapted edp nofaces origin=[[https://doc.freefem.org/models/domain-decomposition.html]] start=08/10/21 univ update=10/06/24

// Parameters
int inside = 2; int outside = 1; int n = 4;

// Mesh
border a(t=1, 2){x=t; y=0; label=outside;};
border b(t=0, 1){x=2; y=t; label=outside;};
border c(t=2, 0){x=t; y=1; label=outside;};
border d(t=1, 0){x=1-t; y=t; label=inside;};
border e(t=0, 1){x=1-t; y=t; label=inside;};
border e1(t=pi/2, 2*pi){x=cos(t); y=sin(t); label=outside;};
mesh th = buildmesh(a(5*n) + b(5*n) + c(10*n) + d(5*n));
mesh TH = buildmesh(e(5*n) + e1(25*n));
plot(th, TH, wait=true);

// Fespace
fespace vh(th, P1);
vh u=0, v;
vh lambda=0;

fespace VH(TH, P1);
VH U, V;

// Problem
int i = 0;
problem PB (U, V, init=i, solver=Cholesky)
    = int2d(TH)(
          dx(U)*dx(V)
        + dy(U)*dy(V)
    )
    + int2d(TH)(
        - V
    )
    + int1d(TH, inside)(
          lambda*V
    )
    + on(outside, U= 0 )
    ;

problem pb (u, v, init=i, solver=Cholesky)
    = int2d(th)(
          dx(u)*dx(v)
        + dy(u)*dy(v)
    )
    + int2d(th)(
        - v
    )
    + int1d(th, inside)(
        - lambda*v
    )
    + on(outside, u=0)
    ;

for (i = 0; i < 10; i++){
    // Solve
    PB;
    pb;
    lambda = lambda - (u-U)/2;

    // Plot
    plot(U,u,wait=true);
}

// Plot
plot(U, u);

real ref=u[]'*u[];
cout<<"FFREF_REF"<<"VAL="<<ref<<endl;
cout<<"FFREF_CHECK_";
if(ref>5.09347 && ref<5.09349)cout<<"OK"<<endl;
else cout<<"KO"<<endl;
;

// v2: add a reference value
// Version v2;

// Local Variables:
// mode:ff++
// c-basic-offset:2
// eval:(visual-line-mode t)
// coding:utf-8
// eval:(flyspell-prog-mode)
// eval:(outline-minor-mode)
// eval:(org-link-minor-mode)
// End:
// LocalWords: emacs
