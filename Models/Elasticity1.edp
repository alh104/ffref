


// ~/ffalh/ffref/Models/Elasticity1.m4
// ===================================
// 
// Originally from [[https://doc.freefem.org/models/elasticity.html]]
// Adapted by Antoine Le Hyaric ([[http://www.ljll.fr/lehyaric]])
// 
// Sorbonne Universit√©, CNRS, Laboratoire Jacques-Louis Lions, F-75005, Paris, France
// 
// [[elisp:(progn (org-link-minor-mode) (setq org-link-descriptive nil) (org-toggle-link-display))][hide links]] [[elisp:(progn (org-link-minor-mode) (setq org-link-descriptive t) (org-toggle-link-display))][show links]] [[elisp:(alh-1dex-open)][open 1dex]] [[elisp:(alh-1dex-update)][update 1dex]]
// [[elisp:(alh-set-keywords)][set keywords]] ([[file:~/alh/bin/headeralh][headeralh]])
// emacs-keywords adapted edp nofaces origin=[[https://doc.freefem.org/models/elasticity.html]] start=08/10/21 univ update=10/06/24

// Parameters
real E = 21.5;
real sigma = 0.29;
real gravity = -0.05;

// Mesh
border a(t=2, 0){x=0; y=t; label=1;}
border b(t=0, 10){x=t; y=0; label=2;}
border c(t=0, 2){ x=10; y=t; label=1;}
border d(t=0, 10){ x=10-t; y=2; label=3;}
mesh th = buildmesh(b(20) + c(5) + d(20) + a(5));

// Fespace
fespace Vh(th, [P1, P1]);
Vh [uu, vv];
Vh [w, s];

// Macro
real sqrt2 = sqrt(2.);
macro epsilon(u1, u2) [dx(u1), dy(u2), (dy(u1)+dx(u2))/sqrt2] //
macro div(u,v) (dx(u) + dy(v)) //

// Problem
real mu = E/(2*(1+sigma));
real lambda = E*sigma/((1+sigma)*(1-2*sigma));
solve Elasticity ([uu, vv], [w, s])
    = int2d(th)(
          lambda*div(w,s)*div(uu,vv)
        + 2.*mu*( epsilon(w,s)'*epsilon(uu,vv) )
    )
    + int2d(th)(
        - gravity*s
    )
    + on(1, uu=0, vv=0)
;

// Plot
plot([uu, vv], wait=true);
plot([uu,vv], wait=true, bb=[[-0.5, 2.5], [2.5, -0.5]]);

// Movemesh
mesh th1 = movemesh(th, [x+uu, y+vv]);
plot(th1, wait=true);

real ref=uu[]'*uu[]+vv[]'*vv[];
cout<<"FFREF_REF"<<"VAL="<<ref<<endl;
cout<<"FFREF_CHECK_";
if(ref>4.38176 && ref<4.38178)cout<<"OK"<<endl;
else cout<<"KO"<<endl;
;

// v2: add a reference value
// Version v2;

// Local Variables:
// mode:ff++
// c-basic-offset:2
// eval:(visual-line-mode t)
// coding:utf-8
// eval:(flyspell-prog-mode)
// eval:(outline-minor-mode)
// eval:(org-link-minor-mode)
// End:
// LocalWords: emacs
