


// ~/ffalh/ffref/Models/VariationalInequality.m4
// =============================================
// 
// Originally from [[https://doc.freefem.org/models/variational-inequality.html]]
// Adapted by Antoine Le Hyaric ([[http://www.ljll.fr/lehyaric]])
// 
// [[elisp:(progn (org-link-minor-mode) (setq org-link-descriptive nil) (org-toggle-link-display))][hide links]] [[elisp:(progn (org-link-minor-mode) (setq org-link-descriptive t) (org-toggle-link-display))][show links]] [[elisp:(alh-1dex-open)][open 1dex]] [[elisp:(alh-1dex-update)][update 1dex]]
// [[elisp:(alh-set-keywords)][set keywords]] ([[file:~/alh/bin/headeralh][headeralh]])
// emacs-keywords adapted edp nofaces origin=[[https://doc.freefem.org/models/variational-inequality.html]] start=08/10/21 update=10/06/24

// Parameters
real eps = 1e-5;
real c = 1000; //penalty parameter of the algoritm
real tgv = 1e30; //a huge value for exact penalization
func f = 1; //right hand side function
func fd = 0; //Dirichlet boundary condition function

// Mesh
mesh Th = square(20, 20);

// Fespace
fespace Vh(Th, P1);
int n = Vh.ndof; //number of degree of freedom
Vh uh, uhp; //u^n+1 and u^n
Vh Ik; //to define the set where the containt is reached.
Vh g = 0.05; //discret function g
Vh lambda = 0;

// Problem
varf a (uh, vh)
    = int2d(Th)(
          dx(uh)*dx(vh)
        + dy(uh)*dy(vh)
    )
    - int2d(Th)(
          f*vh
    )
    + on(1, 2, 3, 4, uh=fd)
    ;

//the mass Matrix construction
varf vM (uh, vh) = int2d(Th)(uh*vh);

//two versions of the matrix of the problem
matrix A = a(Vh, Vh, tgv=tgv, solver=CG); //one changing
matrix AA = a(Vh, Vh, solver=CG); //one for computing residual

matrix M = vM(Vh, Vh); //to do a fast computing of L^2 norm : sqrt(u'*(w=M*u))

real[int] Aiin(n);
real[int] Aii = A.diag; //get the diagonal of the matrix
real[int] rhs = a(0, Vh, tgv=tgv);

// Initialization
Ik = 0;
uhp = -tgv;

// Loop
for(int iter = 0; iter < 100; ++iter){
    // Update
    real[int] b = rhs; //get a copy of the Right hand side
    real[int] Ak(n); //the complementary of Ik ( !Ik = (Ik-1))
    Ak = 1.; Ak -= Ik[];
    //adding new locking condition on b and on the diagonal if (Ik ==1 )
    b = Ik[] .* g[]; b *= tgv; b -= Ak .* rhs;
    Aiin = Ik[] * tgv; Aiin += Ak .* Aii; //set Aii= tgv i in Ik
    A.diag = Aiin; //set the matrix diagonal
    set(A, solver=CG); //important to change preconditioning for solving

    // Solve
    uh[] = A^-1* b; //solve the problem with more locking condition

    // Residual
    lambda[] = AA * uh[]; //compute the residual (fast with matrix)
    lambda[] += rhs; //remark rhs = -\int f v

    Ik = (lambda + c*( g- uh)) < 0.; //the new locking value

    // Plot
    plot(Ik, wait=true, cmm=" lock set ", value=true, fill=true);
    plot(uh, wait=true, cmm="uh");

    // Error
    //trick to compute L^2 norm of the variation (fast method)
    real[int] diff(n), Mdiff(n);
    diff = uh[] - uhp[];
    Mdiff = M*diff;
    real err = sqrt(Mdiff'*diff);
    cout << "|| u_{k=1} - u_{k} ||_2 = " << err << endl;

    // Stop test
    if(err < eps) break;

    // Update
    uhp[] = uh[];
}

real ref=uh[]'*uh[];
real ffreferror=abs(ref-0.438074)/0.438074;
cout<<"FFREF_"<<"ERROR="<<ffreferror<<endl;
cout<<"FFREF_"<<"ERRMAX="<<1e-6<<endl;
cout<<"FFREF_REF"<<"VAL="<<ref<<endl;
cout<<"FFREF_CHECK_";
if(ffreferror<1e-6)cout<<"OK"<<endl;
else cout<<"KO"<<endl;
;

// v2: add a reference value
// Version v2;

// Local Variables:
// mode:ff++
// c-basic-offset:2
// eval:(visual-line-mode t)
// coding:utf-8
// eval:(flyspell-prog-mode)
// eval:(outline-minor-mode)
// eval:(org-link-minor-mode)
// End:
// LocalWords: emacs
